[
    {
        "id": "599c1d1ebfc1a92c",
        "type": "subflow",
        "name": "sqlite",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 60,
                "y": 80,
                "wires": [
                    {
                        "id": "540c842f56caed65"
                    }
                ]
            }
        ],
        "out": [
            {
                "x": 360,
                "y": 80,
                "wires": [
                    {
                        "id": "540c842f56caed65",
                        "port": 0
                    }
                ]
            }
        ],
        "env": [
            {
                "name": "Fixed_Statement",
                "type": "str",
                "value": ""
            }
        ],
        "meta": {},
        "color": "#F3B567",
        "icon": "font-awesome/fa-database"
    },
    {
        "id": "540c842f56caed65",
        "type": "function",
        "z": "599c1d1ebfc1a92c",
        "name": "function 149",
        "func": "const sqlite3 = global.get('sqlite3');\nconst dbPath = './datab.db'; // O usa global.get('dbPath') si lo configuraste en settings.js\n\n// Obtener el query desde una variable de entorno o msg.topic\nconst env_query = env.get('Fixed_Statement');\n\nif (msg.topic == '' && env_query == ''){\n    return null;\n}\n\nconst query = (env_query === '') ? msg.topic : env_query;\n\n// Verificar que se ha proporcionado un query SQL\nif (!query) {\n    node.error('No se ha proporcionado un query SQL.');\n    return null;\n}\n\n// Abrir la base de datos SQLite\nconst db = new sqlite3.Database(dbPath, (err) => {\n    if (err) {\n        node.error('Error al conectar a la base de datos SQLite', err);\n        return;\n    }\n\n    // Ejecutar el query\n    db.all(query, [], (err, rows) => {\n        if (err) {\n            node.error('Error al ejecutar el query', err);\n            db.close();\n            return;\n        }\n\n        // Pasar los resultados al siguiente nodo\n        msg.payload = { rows: rows };\n        db.close();\n        node.send(msg); // Enviar el mensaje al siguiente nodo\n    });\n});\n\n// No retornamos nada aqu√≠ porque `node.send` maneja la salida\nreturn null;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 210,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "6ab6a9b18fe1e221",
        "type": "function",
        "z": "599c1d1ebfc1a92c",
        "name": "function 6",
        "func": "\nconst env_query = env.get('Fixed_Statement');\n\nif (msg.topic == '' && env_query == ''){\n    return null;\n}\n\nconst query = (env_query === '') ? msg.topic : env_query;\n\nreturn msg;\n",
        "outputs": 1,
        "timeout": 0,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "9a63bb3a153bd227",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "8e600359261c020d",
        "type": "subflow:599c1d1ebfc1a92c",
        "z": "9a63bb3a153bd227",
        "name": "",
        "env": [
            {
                "name": "Fixed_Statement",
                "value": "CREATE TABLE IF NOT EXISTS mediciones_sensor_a ( valor_medido REAL, orden INTEGER, tiempo TEXT)",
                "type": "str"
            }
        ],
        "x": 326,
        "y": 99,
        "wires": [
            []
        ]
    },
    {
        "id": "8cbea7a91d39fb4f",
        "type": "inject",
        "z": "9a63bb3a153bd227",
        "name": "",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "1.5",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "x": 136,
        "y": 99,
        "wires": [
            [
                "8e600359261c020d",
                "ce8501d6004a6195",
                "5c9442d97af3cb01",
                "ec81789b4e74ca20"
            ]
        ]
    },
    {
        "id": "ce8501d6004a6195",
        "type": "subflow:599c1d1ebfc1a92c",
        "z": "9a63bb3a153bd227",
        "name": "",
        "env": [
            {
                "name": "Fixed_Statement",
                "value": "CREATE TABLE IF NOT EXISTS mediciones_sensor_b ( valor_medido REAL, orden INTEGER, tiempo TEXT );",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 140,
        "wires": [
            []
        ]
    },
    {
        "id": "5c9442d97af3cb01",
        "type": "subflow:599c1d1ebfc1a92c",
        "z": "9a63bb3a153bd227",
        "name": "",
        "env": [
            {
                "name": "Fixed_Statement",
                "value": "CREATE TABLE IF NOT EXISTS mediciones_sensor_c ( valor_medido REAL, orden INTEGER, tiempo TEXT );",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 180,
        "wires": [
            []
        ]
    },
    {
        "id": "ec81789b4e74ca20",
        "type": "subflow:599c1d1ebfc1a92c",
        "z": "9a63bb3a153bd227",
        "name": "",
        "env": [
            {
                "name": "Fixed_Statement",
                "value": "CREATE TABLE IF NOT EXISTS incertidumbres_sensores ( sensor TEXT PRIMARY KEY CHECK (sensor IN ('a', 'b', 'c')), incertidumbre REAL );",
                "type": "str"
            }
        ],
        "x": 330,
        "y": 220,
        "wires": [
            [
                "c95bc4e56fea1c11"
            ]
        ]
    },
    {
        "id": "c95bc4e56fea1c11",
        "type": "subflow:599c1d1ebfc1a92c",
        "z": "9a63bb3a153bd227",
        "name": "",
        "env": [
            {
                "name": "Fixed_Statement",
                "value": "INSERT OR IGNORE INTO incertidumbres_sensores (sensor, incertidumbre) VALUES ('a', 0.0), ('b', 0.0), ('c', 0.0);",
                "type": "str"
            }
        ],
        "x": 470,
        "y": 220,
        "wires": [
            []
        ]
    },
    {
        "id": "9b53532e607c84ec",
        "type": "comment",
        "z": "9a63bb3a153bd227",
        "name": "-",
        "info": "Autor: justme088",
        "x": 150,
        "y": 1180,
        "wires": []
    }
]
